
import java.awt.Color;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Aleksandra Stempin
 */
public class Maszyna_szyfrujaca_wersja_2_0 extends javax.swing.JFrame {

    /**
     * Creates new form maszyna_szyfrująca
     */
    public Maszyna_szyfrujaca_wersja_2_0() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        codeNumberLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        oryginalTextArea = new javax.swing.JTextArea();
        paste = new javax.swing.JButton();
        codeNumberField = new javax.swing.JTextField();
        oryginalTextLabel = new javax.swing.JLabel();
        code = new javax.swing.JButton();
        cleanAll = new javax.swing.JButton();
        codedTextLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        codedTextArea = new javax.swing.JTextArea();
        copy = new javax.swing.JButton();
        colorListLabel = new javax.swing.JLabel();
        colorList = new javax.swing.JComboBox<>();
        deCode = new javax.swing.JButton();
        cleanText = new javax.swing.JButton();
        saveToFile = new javax.swing.JButton();
        OpenFile = new javax.swing.JButton();
        HelpButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        bottmLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(title);
        setBounds(new java.awt.Rectangle(200, 70, 300, 400));
        setIconImage(Toolkit.getDefaultToolkit().createImage(getClass().getResource("machine.png")));
        setResizable(false);

        mainPanel.setBackground(panelColorViolet);
        mainPanel.setToolTipText("");
        mainPanel.setPreferredSize(new java.awt.Dimension(921, 589));

        codeNumberLabel.setBackground(panelColorViolet);
        codeNumberLabel.setFont(standartFont);
        codeNumberLabel.setForeground(fontColorViolet);
        codeNumberLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        codeNumberLabel.setText(CodeNumberLabelString);
        codeNumberLabel.setToolTipText("");
        codeNumberLabel.setAutoscrolls(true);
        codeNumberLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        codeNumberLabel.setOpaque(true);

        oryginalTextArea.setBackground(textAreaColorViolet);
        oryginalTextArea.setColumns(20);
        oryginalTextArea.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        oryginalTextArea.setLineWrap(true);
        oryginalTextArea.setRows(5);
        oryginalTextArea.setToolTipText("");
        oryginalTextArea.setWrapStyleWord(true);
        oryginalTextArea.setAlignmentX(5);
        oryginalTextArea.setFocusTraversalPolicyProvider(true);
        oryginalTextArea.setName(""); // NOI18N
        oryginalTextArea.setNextFocusableComponent(codeNumberField);
        jScrollPane1.setViewportView(oryginalTextArea);
        oryginalTextArea.requestFocus(true);

        paste.setBackground(buttonColorViolet);
        paste.setFont(standartFont);
        paste.setForeground(fontColorViolet);
        paste.setText(buttonPasteteString);
        paste.setFocusable(false);
        paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteActionPerformed(evt);
            }
        });

        codeNumberField.setBackground(textAreaColorViolet);
        codeNumberField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        codeNumberField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        codeNumberField.setNextFocusableComponent(oryginalTextArea);

        oryginalTextLabel.setBackground(panelColorViolet);
        oryginalTextLabel.setFont(standartFont);
        oryginalTextLabel.setForeground(fontColorViolet);
        oryginalTextLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        oryginalTextLabel.setText(textOriginalLabelString);
        oryginalTextLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        oryginalTextLabel.setOpaque(true);

        code.setBackground(buttonColorViolet);
        code.setFont(standartFont);
        code.setForeground(fontColorViolet);
        code.setText(buttonCodeString);
        code.setFocusable(false);

        cleanAll.setBackground(buttonColorViolet);
        cleanAll.setFont(standartFont);
        cleanAll.setForeground(fontColorViolet);
        cleanAll.setText(buttonCleanString);
        cleanAll.setFocusable(false);

        codedTextLabel.setBackground(panelColorViolet);
        codedTextLabel.setFont(standartFont);
        codedTextLabel.setForeground(fontColorViolet);
        codedTextLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        codedTextLabel.setText(textCodedLabelString);
        codedTextLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        codedTextLabel.setOpaque(true);

        codedTextArea.setEditable(false);
        codedTextArea.setBackground(textAreaColorViolet);
        codedTextArea.setColumns(20);
        codedTextArea.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        codedTextArea.setLineWrap(true);
        codedTextArea.setRows(5);
        codedTextArea.setWrapStyleWord(true);
        jScrollPane2.setViewportView(codedTextArea);

        copy.setBackground(buttonColorViolet);
        copy.setFont(standartFont);
        copy.setForeground(fontColorViolet);
        copy.setText(buttonCopyString);
        copy.setFocusable(false);
        copy.setSelected(true);
        copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyActionPerformed(evt);
            }
        });

        colorListLabel.setFont(standartFont);
        colorListLabel.setForeground(fontColorViolet);
        colorListLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        colorListLabel.setText(colorListLabelString);
        colorListLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        colorListLabel.setOpaque(true);

        colorList.setFont(standartFont);
        colorList.setForeground(fontColorViolet);
        colorList.setModel((new javax.swing.DefaultComboBoxModel<>(new String[] {colorListViolet, colorListGreen, colorListBlue })));
        colorList.setFocusable(false);
        colorList.setOpaque(false);
        colorList.setRequestFocusEnabled(false);
        colorList.setVerifyInputWhenFocusTarget(false);
        colorList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorListActionPerformed(evt);
            }
        });

        deCode.setBackground(buttonColorViolet);
        deCode.setFont(standartFont);
        deCode.setForeground(fontColorViolet);
        deCode.setText(buttonDeCodeString);
        deCode.setFocusable(false);
        deCode.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        cleanText.setBackground(buttonColorViolet);
        cleanText.setFont(standartFont);
        cleanText.setForeground(fontColorViolet);
        cleanText.setText(buttonCleanTextString);
        cleanText.setFocusPainted(false);
        cleanText.setFocusable(false);

        saveToFile.setBackground(buttonColorViolet);
        saveToFile.setFont(standartFont);
        saveToFile.setForeground(fontColorViolet);
        saveToFile.setFocusable(false);
        saveToFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveToFileActionPerformed(evt);
            }
        });

        OpenFile.setBackground(buttonColorViolet);
        OpenFile.setFont(standartFont);
        OpenFile.setForeground(fontColorViolet);
        OpenFile.setFocusable(false);
        OpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenFileActionPerformed(evt);
            }
        });

        HelpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/helpBottom.png"))); // NOI18N
        HelpButton.setToolTipText("");
        HelpButton.setFocusPainted(false);
        HelpButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        HelpButton.setOpaque(false);
        HelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelpButtonActionPerformed(evt);
            }
        });

        jLabel1.setToolTipText("");
        jLabel1.setFocusable(false);

        bottmLabel.setBackground(panelColorViolet);
        bottmLabel.setFont(standartFont);
        bottmLabel.setForeground(fontColorViolet);
        bottmLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bottmLabel.setText(bottomlabelText);
        bottmLabel.setToolTipText("");
        bottmLabel.setAutoscrolls(true);
        bottmLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bottmLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(cleanAll, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
                                    .addComponent(code, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(OpenFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(saveToFile, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                        .addGap(9, 9, 9)
                                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(deCode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(cleanText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(mainPanelLayout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(codeNumberLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(codeNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(mainPanelLayout.createSequentialGroup()
                                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(oryginalTextLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                                        .addComponent(colorListLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(mainPanelLayout.createSequentialGroup()
                                            .addComponent(colorList, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(HelpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(codedTextLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)))
                                .addGroup(mainPanelLayout.createSequentialGroup()
                                    .addComponent(paste, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(copy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(12, 12, 12))))
        );

        mainPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {codeNumberField, jLabel1});

        mainPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jScrollPane1, jScrollPane2, oryginalTextLabel, paste});

        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(colorListLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                        .addComponent(colorList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(HelpButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(21, 21, 21)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(oryginalTextLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(codedTextLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(codeNumberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(codeNumberField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(paste, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(copy, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveToFile, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(OpenFile, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deCode)
                    .addComponent(code, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cleanAll, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cleanText, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bottmLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
        );

        mainPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {OpenFile, cleanAll, cleanText, code, copy, deCode, paste, saveToFile});

        mainPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {codeNumberField, codeNumberLabel, codedTextLabel, colorList, colorListLabel, jLabel1, oryginalTextLabel});

        mainPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jScrollPane1, jScrollPane2});

        paste.setMnemonic(buttonPasteteString.charAt(1));
        //codeNumberField.setBackground(textAreaColorViolet);
        code.addActionListener(new CodeButton());
        code.setMnemonic(buttonCodeString.charAt(0));
        cleanAll.addActionListener(new CleanButton());
        cleanAll.setMnemonic(buttonCleanString.charAt(0));
        copy.setMnemonic(buttonCopyString.charAt(0));
        colorListLabel.setBackground(panelColorViolet);
        colorList.requestFocus(false);
        colorList.setBackground(buttonColorViolet);
        deCode.addActionListener(new CodeButton());
        deCode.setMnemonic(buttonDeCodeString.charAt(0));
        cleanText.addActionListener(new CleanButton());
        cleanText.setMnemonic(buttonCleanTextString.charAt(1));
        saveToFile.setText(buttonSaveToFileString);
        saveToFile.setMnemonic(buttonSaveToFileString.charAt(2));
        OpenFile.setText(buttomOpenFileString);
        OpenFile.setMnemonic(buttomOpenFileString.charAt(0));
        //HelpButton.setText("?");
        //HelpButton.setFont(helpButtonFont);
        HelpButton.setBackground(panelColorViolet);
        //HelpButton.setForeground(fontColorViolet);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 901, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 696, Short.MAX_VALUE)
        );

        //JOptionPane.showMessageDialog(rootPane, startInfo, startInfoLabel, 1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void copyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyActionPerformed
        // TODO add your handling code here:
        String textToCopy = codedTextArea.getText();
        if (textToCopy.equals("")){
            JOptionPane.showMessageDialog(rootPane, copyNoTextString, warningString, 0);
        }else{

            StringSelection textCopied = new StringSelection(textToCopy);

            Clipboard clipboardCopy = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboardCopy.setContents(textCopied, null);
           
        }

    }//GEN-LAST:event_copyActionPerformed

    private void pasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteActionPerformed
        // TODO add your handling code here:
        Clipboard clipboardPastate = Toolkit.getDefaultToolkit().getSystemClipboard();
        DataFlavor flavorPastate = DataFlavor.stringFlavor;
        String textToPastate = "";
        try {
            textToPastate = (String) clipboardPastate.getData(flavorPastate);
            oryginalTextArea.setText(textToPastate);
        } catch (UnsupportedFlavorException ex) {
            JOptionPane.showMessageDialog(rootPane, pasteteFlavorExceptionString, warningString, 0);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(rootPane, pasteteIOExceptionString, warningString, 0);
        }
    }//GEN-LAST:event_pasteActionPerformed

    private void colorListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorListActionPerformed
        // TODO add your handling code here:
        String choosenColor = colorList.getSelectedItem().toString();
        
        switch (choosenColor) {
            case colorListViolet:
                mainPanel.setBackground(panelColorViolet);
                
                HelpButton.setBackground(panelColorViolet);
                
                bottmLabel.setForeground(fontColorViolet);
              
                oryginalTextArea.setBackground(textAreaColorViolet);
                codedTextArea.setBackground(textAreaColorViolet);
                codeNumberField.setBackground(textAreaColorViolet);
                
                colorList.setBackground(buttonColorViolet);
                colorList.setForeground(fontColorViolet);
              

                code.setBackground(buttonColorViolet);
                code.setForeground(fontColorViolet);
                
                deCode.setBackground(buttonColorViolet);
                deCode.setForeground(fontColorViolet);
                
                copy.setBackground(buttonColorViolet);
                copy.setForeground(fontColorViolet);
                
                paste.setBackground(buttonColorViolet);
                paste.setForeground(fontColorViolet);
                
                OpenFile.setBackground(buttonColorViolet);
                OpenFile.setForeground(fontColorViolet);
                
                saveToFile.setBackground(buttonColorViolet);
                saveToFile.setForeground(fontColorViolet);
              
                code.setBackground(buttonColorViolet);
                code.setForeground(fontColorViolet);
                
                cleanAll.setBackground(buttonColorViolet);
                cleanAll.setForeground(fontColorViolet);
                
                cleanText.setBackground(buttonColorViolet);
                cleanText.setForeground(fontColorViolet);
                
                colorListLabel.setBackground(panelColorViolet);
                colorListLabel.setForeground(fontColorViolet);
                
                oryginalTextLabel.setBackground(panelColorViolet);
                oryginalTextLabel.setForeground(fontColorViolet);
                
                codedTextLabel.setBackground(panelColorViolet);
                codedTextLabel.setForeground(fontColorViolet);
                
                codeNumberLabel.setBackground(panelColorViolet);
                codeNumberLabel.setForeground(fontColorViolet);
                
                break;
                
            case colorListGreen:
                mainPanel.setBackground(panelColorGreen);
                
                HelpButton.setBackground(panelColorGreen);
                
                bottmLabel.setForeground(fontColorGreen);
                
                oryginalTextArea.setBackground(textAreaColorGreen);
                codedTextArea.setBackground(textAreaColorGreen);
                codeNumberField.setBackground(textAreaColorGreen);
                
                colorList.setBackground(buttonColorGreen);
                colorList.setForeground(fontColorGreen);
                //colorList.setFont(standartFont);
                
                code.setBackground(buttonColorGreen);
                code.setForeground(fontColorGreen);
                
                copy.setBackground(buttonColorGreen);
                copy.setForeground(fontColorGreen);
                
                paste.setBackground(buttonColorGreen);
                paste.setForeground(fontColorGreen);
                
                OpenFile.setBackground(buttonColorGreen);
                OpenFile.setForeground(fontColorGreen);
                
                saveToFile.setBackground(buttonColorGreen);
                saveToFile.setForeground(fontColorGreen);
                
                code.setBackground(buttonColorGreen);
                code.setForeground(fontColorGreen);
                
                deCode.setBackground(buttonColorGreen);
                deCode.setForeground(fontColorGreen);
                
                cleanAll.setBackground(buttonColorGreen);
                cleanAll.setForeground(fontColorGreen);
                
                cleanText.setBackground(buttonColorGreen);
                cleanText.setForeground(fontColorGreen);
                
                colorListLabel.setBackground(panelColorGreen);
                colorListLabel.setForeground(fontColorGreen);
                
                oryginalTextLabel.setBackground(panelColorGreen);
                oryginalTextLabel.setForeground(fontColorGreen);
                
                codedTextLabel.setBackground(panelColorGreen);
                codedTextLabel.setForeground(fontColorGreen);
                
                codeNumberLabel.setBackground(panelColorGreen);
                codeNumberLabel.setForeground(fontColorGreen);
     
                break;
                
            case colorListBlue:
                mainPanel.setBackground(panelColorBlue);
                
                HelpButton.setBackground(panelColorBlue);
                
                bottmLabel.setForeground(fontColorBlue);
                
                oryginalTextArea.setBackground(textAreaColorBlue);
                codedTextArea.setBackground(textAreaColorBlue);
                codeNumberField.setBackground(textAreaColorBlue);
                
                colorList.setBackground(buttonColorBlue);
                colorList.setForeground(fontColorBlue);
                //colorList.setFont(standartFont);
                
                code.setBackground(buttonColorBlue);
                code.setForeground(fontColorBlue);
                
                copy.setBackground(buttonColorBlue);
                copy.setForeground(fontColorBlue);
                
                paste.setBackground(buttonColorBlue);
                paste.setForeground(fontColorBlue);
                
                OpenFile.setBackground(buttonColorBlue);
                OpenFile.setForeground(fontColorBlue);
                
                saveToFile.setBackground(buttonColorBlue);
                saveToFile.setForeground(fontColorBlue);
                
                code.setBackground(buttonColorBlue);
                code.setForeground(fontColorBlue);
                
                deCode.setBackground(buttonColorBlue);
                deCode.setForeground(fontColorBlue);
                
                cleanAll.setBackground(buttonColorBlue);
                cleanAll.setForeground(fontColorBlue);
                
                cleanText.setBackground(buttonColorBlue);
                cleanText.setForeground(fontColorBlue);
                
                colorListLabel.setBackground(panelColorBlue);
                colorListLabel.setForeground(fontColorBlue);
                
                oryginalTextLabel.setBackground(panelColorBlue);
                oryginalTextLabel.setForeground(fontColorBlue);
                
                codedTextLabel.setBackground(panelColorBlue);
                codedTextLabel.setForeground(fontColorBlue);
                
                codeNumberLabel.setBackground(panelColorBlue);
                codeNumberLabel.setForeground(fontColorBlue);

                break;
                
            default:
                mainPanel.setBackground(panelColorViolet);
                
                HelpButton.setBackground(panelColorViolet);
                
               bottmLabel.setForeground(fontColorViolet);
                
                oryginalTextArea.setBackground(textAreaColorViolet);
                codedTextArea.setBackground(textAreaColorViolet);
                codeNumberField.setBackground(textAreaColorViolet);
                
                colorList.setBackground(buttonColorViolet);
                colorList.setForeground(fontColorViolet);
                //colorList.setFont(standartFont);
                
                code.setBackground(buttonColorViolet);
                code.setForeground(fontColorViolet);
                
                copy.setBackground(buttonColorViolet);
                copy.setForeground(fontColorViolet);
                
                paste.setBackground(buttonColorViolet);
                paste.setForeground(fontColorViolet);
                
                OpenFile.setBackground(buttonColorViolet);
                OpenFile.setForeground(fontColorViolet);
                
                saveToFile.setBackground(buttonColorViolet);
                saveToFile.setForeground(fontColorViolet);
                
                code.setBackground(buttonColorViolet);
                code.setForeground(fontColorViolet);
                
                deCode.setBackground(buttonColorViolet);
                deCode.setForeground(fontColorViolet);
                
                cleanAll.setBackground(buttonColorViolet);
                cleanAll.setForeground(fontColorViolet);
                
                cleanText.setBackground(buttonColorViolet);
                cleanText.setForeground(fontColorViolet);
                
                colorListLabel.setBackground(panelColorViolet);
                colorListLabel.setForeground(fontColorViolet);
                
                oryginalTextLabel.setBackground(panelColorViolet);
                oryginalTextLabel.setForeground(fontColorViolet);
                
                codedTextLabel.setBackground(panelColorViolet);
                codedTextLabel.setForeground(fontColorViolet);
                
                codeNumberLabel.setBackground(panelColorViolet);
                codeNumberLabel.setForeground(fontColorViolet);
                
                break;
        }
        
        
    }//GEN-LAST:event_colorListActionPerformed

    private void saveToFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveToFileActionPerformed
        // TODO add your handling code here:
        
        String textToBeFile = codedTextArea.getText();
        if (textToBeFile.equals("")){
            JOptionPane.showMessageDialog(rootPane, SaveToFileStringError, errorString, 0);
        } else {

        JFileChooser saveFileChooser = new JFileChooser();
        
        saveFileChooser.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter textFileFilter = new FileNameExtensionFilter(FileNameExtensionFilterString, "txt");
        saveFileChooser.setFileFilter(textFileFilter);
        //saveFileChooser.setCurrentDirectory(new java.io.File("C:\\Users\\Ola\\Desktop"));
        saveFileChooser.setDialogTitle(saveFileChooserTitle);
        int createFile = saveFileChooser.showSaveDialog(null);
        if (createFile == JFileChooser.APPROVE_OPTION){
           File codedFile = saveFileChooser.getSelectedFile();
           String saveFilePath = codedFile.getAbsolutePath();
           String saveFileName = codedFile.getName();
           if (!saveFileName.endsWith(".txt")){
              saveFileName=saveFileName + ".txt";
              saveFilePath = saveFilePath + ".txt"; 
           }
   
           if ( !codedFile.exists()){
 
            Writer writer = null;
            try {
        writer = new BufferedWriter(new OutputStreamWriter(
//                new FileOutputStream(saveFilePath), "utf-8"));
//                new FileOutputStream(saveFilePath), "Cp1252"));
                
        new FileOutputStream(saveFilePath)));
        codedTextArea.write(writer);
    } catch (IOException ex) {
        
    }finally {
        try {
            writer.close();
        } catch (Exception ex) {/*ignore*/
        }
    }   
       } else{
           
              int ansver= JOptionPane.showConfirmDialog(rootPane,  overwriteDialogPart1 + saveFileName + overwriteDialogPart2, overwriteDialogTitle, 0, 3);
               if (ansver ==JOptionPane.OK_OPTION){
                   
                   Writer writer2 = null;
                               try {
        writer2 = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(saveFilePath)));
        codedTextArea.write(writer2);
    } catch (IOException ex) {
        
    }finally {
        try {
            writer2.close();
        } catch (Exception ex) {/*ignore*/
        }
    }   
                   
               } else{
                   
               }   
           }
  
        }

        }
        
        
        
        
    }//GEN-LAST:event_saveToFileActionPerformed

    private void OpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenFileActionPerformed
        // TODO add your handling code here:
       
    JFileChooser openFileChooser = new JFileChooser();
    openFileChooser.setAcceptAllFileFilterUsed(false);
    FileNameExtensionFilter textFileFilter = new FileNameExtensionFilter(FileNameExtensionFilterString, "txt");
    openFileChooser.setFileFilter(textFileFilter);
    openFileChooser.setDialogTitle(openFileChooserTitle);
    int returnVal = openFileChooser.showOpenDialog(null);
    if(returnVal == JFileChooser.APPROVE_OPTION) {
    File myTextFile = openFileChooser.getSelectedFile();
    String fileName = myTextFile.getName();
    String filePath = myTextFile.getAbsolutePath();

    if (!fileName.endsWith(".txt")){
        JOptionPane.showMessageDialog(rootPane, fileTypeError, errorString , 0);
    } else{


String fileText = "";
       
    // wczytywanie pliku BufferedReader   
//       
//        try { 
//            BufferedReader br = new BufferedReader(new FileReader(myTextFile));
//            String nextLine; 
//    while ((nextLine = br.readLine()) != null){
//       fileText = fileText + nextLine + "\n";
//  
//    } 
//        } catch (FileNotFoundException ex) {
//            Logger.getLogger(Maszyna_szyfrujaca_wersja_2_0.class.getName()).log(Level.SEVERE, null, ex);
//            JOptionPane.showMessageDialog(rootPane, fileNotRead, errorString , 0);
//        } catch (IOException ex) {
//            Logger.getLogger(Maszyna_szyfrujaca_wersja_2_0.class.getName()).log(Level.SEVERE, null, ex);
//            JOptionPane.showMessageDialog(rootPane, fileNotRead, errorString , 0);
//        }
       
    // koniec wczytywanie pliku BufferedReader  
    
    

    //metoda StringBuilder
    StringBuilder fileTextBuilder = new StringBuilder(fileText);
    try { 
            BufferedReader br = new BufferedReader(new FileReader(myTextFile));
            String nextLine; 
    while ((nextLine = br.readLine()) != null){
       fileTextBuilder.append(nextLine);
       fileTextBuilder.append("\n");
//       fileText = fileText + nextLine + "\n";
  
    } 
            } catch (FileNotFoundException ex) {
            Logger.getLogger(Maszyna_szyfrujaca_wersja_2_0.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, fileNotRead, errorString , 0);
        } catch (IOException ex) {
            Logger.getLogger(Maszyna_szyfrujaca_wersja_2_0.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, fileNotRead, errorString , 0);
        }
    fileText = fileTextBuilder.toString();
    //koniec metody StringBuilder


       oryginalTextArea.setText(fileText);

    }
    }   
    }//GEN-LAST:event_OpenFileActionPerformed

    private void HelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HelpButtonActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(rootPane, startInfo, startInfoLabel, 1);
    }//GEN-LAST:event_HelpButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws ClassNotFoundException, InstantiationException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }

            }

            UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");

  
            

        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Maszyna_szyfrujaca_wersja_2_0.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Maszyna_szyfrujaca_wersja_2_0.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Maszyna_szyfrujaca_wersja_2_0.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Maszyna_szyfrujaca_wersja_2_0.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        
        /* Create and display the form */
               
            // select Look and Feel


        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Maszyna_szyfrujaca_wersja_2_0().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton HelpButton;
    public javax.swing.JButton OpenFile;
    private javax.swing.JLabel bottmLabel;
    private javax.swing.JButton cleanAll;
    private javax.swing.JButton cleanText;
    private javax.swing.JButton code;
    private javax.swing.JTextField codeNumberField;
    private javax.swing.JLabel codeNumberLabel;
    private javax.swing.JTextArea codedTextArea;
    private javax.swing.JLabel codedTextLabel;
    private javax.swing.JComboBox<String> colorList;
    private javax.swing.JLabel colorListLabel;
    private javax.swing.JButton copy;
    private javax.swing.JButton deCode;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTextArea oryginalTextArea;
    private javax.swing.JLabel oryginalTextLabel;
    private javax.swing.JButton paste;
    private javax.swing.JButton saveToFile;
    // End of variables declaration//GEN-END:variables

private class CodeButton implements ActionListener {
    
    String alphabet = alphabetBasic + alphabetBasic + alphabetBasic;
    int alphabetLenght = alphabetBasic.length();
    int startChar = alphabet.length()/3;
    int endChar = startChar + alphabetLenght - 1;



        @Override
        public void actionPerformed(ActionEvent e) {
            String textOryginal = oryginalTextArea.getText();
            int textLenght = textOryginal.length();

            if (!textOryginal.equals("")){

                CodeNumberFieldHandler codeNumberFieldhandler = new CodeNumberFieldHandler();
                String codeNumberRaw = codeNumberField.getText();
                double codeNumber = codeNumberFieldhandler.parseInt(codeNumberRaw);
                if (codeNumber%1!=0){
                    JOptionPane.showMessageDialog(rootPane,wrongCodeNumberString, attentionString, 0); 
                }
               
               else if (codeNumber%1==0){
                  int codeNumber2 = (int)codeNumber;
                  codeNumber2 = codeNumber2 % alphabetLenght;
                  
                  
                    
                    boolean shouldDecode = e.toString().contains(buttonDeCodeString);
              
                    if(shouldDecode){
                        codeNumber2 = codeNumber2*(-1);
                    }

                    char [] textToCode = new char [textLenght];

                    for (int i = 0; i < textLenght; i++){

                      for (int j = startChar; j <= endChar; j++) {

                          if (textOryginal.charAt(i)==alphabet.charAt(j)){
                              textToCode[i]=alphabet.charAt(j+codeNumber2);
                              break;
                          }
   
                          else{
                              textToCode[i]=textOryginal.charAt(i);
                          }

                      }
                    }

                    String textCoded = String.valueOf(textToCode);

                    codedTextArea.setText(textCoded);

                }
                else {
                    JOptionPane.showMessageDialog(rootPane,wrongCodeNumberString, attentionString, 0);
                }
            }
            else{
                JOptionPane.showMessageDialog(rootPane, noTextToCodeString, errorString, 0);
            }
        }
        
    }

private class CleanButton implements ActionListener{

        @Override
        public void actionPerformed(ActionEvent e) {
            String noText = "";
            oryginalTextArea.setText(noText);
            codedTextArea.setText(noText);
            boolean cleanCodeNumber = e.toString().contains(buttonCleanString);
            if(cleanCodeNumber)
                codeNumberField.setText(noText);
            
            System.out.println(cleanCodeNumber);
        }
    
}



public class CodeNumberFieldHandler{

   public double parseInt(String codeNumberRaw) throws NumberFormatException{
       codeNumberRaw = codeNumberField.getText();
            
            try{
                double codeNumber = Integer.parseInt(codeNumberRaw);
                return codeNumber;
            }
            catch (NumberFormatException ex){
                double codeNumber = 2.7;
                return codeNumber; 
            }

        } 
}



private final String alphabetBasic = "AĄBCĆDEĘFGHIJKLŁMNŃOÓPQRSŚTUVWXYZŹŻaąbcćdeęfghijklłmnńoópqrsśtuvwxyzźż1234567890—’'!@#$%^&*„”\"*\\/()_+-=,.:;?";

private final String title = "maszyna szyfrująca";

private final String textOriginalLabelString = "Wpisz lub wklej ze schowka tekst, który chcesz zakodować";

private final String CodeNumberLabelString = "Wpisz liczbę, o którą chcesz przesunąć znaki w tekście";

private final String textCodedLabelString = "Tekst zakodowany";

private final String pasteteFlavorExceptionString = "Zawartość schowka nie jest tekstem";

private final String pasteteIOExceptionString = "Wystąpił błąd wejścia/wyjścia";

private final String copyNoTextString = "Brak tekstu do skopiowania";

private final String wrongCodeNumberString = "Nieprawidłowa wartość przesunięcia";

private final String noTextToCodeString = "Brak tekstu do zakodowania";

private final String startInfoLabel = "informacja początkowa";

private final String warningString = "ostrzeżenie";

private final String attentionString = "uwaga";

private final String errorString = "błąd";

private final String buttonPasteteString = "Wklej tekst ze schowka";

private final String buttonCopyString = "Skopiuj tekst do schowka";

private final String buttomOpenFileString = "Otwórz plik tekstowy";

private final String buttonSaveToFileString = "Zapisz jako plik tekstowy";

private final String SaveToFileStringError = "Brak tekstu do zapisania";

private final String buttonCodeString = "Zakoduj tekst";

private final String buttonDeCodeString = "Rozkoduj tekst";

private final String buttonCleanString = "Wyczyść wszystko";

private final String buttonCleanTextString = "Wyczyść tekst";

private final String startInfo = "\"Maszyna szyfrująca\" używa  szyfru przesuwającego\npolegającego na zastąpieniu każdego znaku\nwpisanego tekstu znakiem oddalonym od niego\no stałą, zdefiniowaną przez uzytkownika, liczbę pozycji.\n\nJeżeli poskie znaki nie wyświetlają sie poprawnie,\nspróbuj zmienić system kodowania znaków w pliku wejściowym.";

private final String colorListLabelString = "Wybierz kolor";

private final String colorListViolet = "Fioletowy";

private final String colorListGreen = "Zielony";

private final String colorListBlue = "Niebieski";

private final String FileNameExtensionFilterString = "pliki tekstowe";

private final String openFileChooserTitle = "Wybierz plik tekstowy";

private final String saveFileChooserTitle = "Wybierz miejsce zapisu pliku";

private  final String fileTypeError = "Zły typ pliku";

private  final String fileNotRead = "Błąd odczytu pliku";

private final String overwriteDialogPart1 = "Plik o nazwie ";

private final String overwriteDialogPart2 = " już istnieje.\nCzy na pewno chcesz go nadpisać?";

private final String overwriteDialogTitle = "Nadpisywanie pliku";

private final String bottomlabelText = "Created by Aleksandra Stempin, 2018";

private final Font standartFont = new Font("Sylfaen", 2, 16);
//private final Font helpButtonFont = new Font("Sylfaen", 3, 25);
// violet
private final Color panelColorViolet = new Color(153,153,255);
private final Color textAreaColorViolet = new Color(204,204,255);
private final Color buttonColorViolet = new Color(102,102,255);
private final Color fontColorViolet = new Color (51,0,51);

// blue
private final Color panelColorBlue = new Color(113, 218, 218);
private final Color textAreaColorBlue = new Color(179, 236, 255);
private final Color buttonColorBlue = new Color(0, 153, 204);
private final Color fontColorBlue = new Color (0, 0, 77);

// green
private final Color panelColorGreen = new Color(102, 204, 102);
private final Color textAreaColorGreen = new Color(159, 223, 159);
private final Color buttonColorGreen = new Color(0, 102, 0);
private final Color fontColorGreen = new Color (0, 51, 0);

}

